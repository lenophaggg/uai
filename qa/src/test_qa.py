# test_qa.py — playground for the FAQ QA-model (pure Q-A, no NER)
# ---------------------------------------------------------------------------
# Демо-режим теперь «разносит» контекст:  • для каждой смысловой группы вопросов
# свой контекст,  • для вариаций внутри группы — один и тот же.
# ---------------------------------------------------------------------------
# Возможности
#   • Демо (по умолчанию) — проходит по SAMPLE_PAIRS и печатает ответ.
#   • Одиночный вопрос/контекст  (--question  --context).
#   • Интерактив: после демо можно вбивать свои пары.
# ---------------------------------------------------------------------------
# Пример
#   python src/test_qa.py                       # демо + интерактив
#   python src/test_qa.py --question "…" --context "…"
# ---------------------------------------------------------------------------

from __future__ import annotations
import argparse, sys
from pathlib import Path
from typing import List, Tuple
from transformers import pipeline

# ───── project paths ──────────────────────────────────────────────────────
ROOT = Path(__file__).resolve().parents[1]
MODEL = ROOT / "models" / "rubert-tiny2-faq"

# ───── демо-набор (вопрос, контекст) -------------------------------------
SAMPLE_PAIRS: List[Tuple[str, str]] = [
    (
        "что делать при потере студенческого билета?",
        "В случае утери студенческого билета необходимо заполнить заявление в деканате и ждать 5 рабочих дней для восстановления."
    ),
    (
        "сколько дней занимает восстановление студенческого билета?",
        "В случае утери студенческого билета необходимо заполнить заявление в деканате и ждать 5 рабочих дней для восстановления."
    ),
    (
        "куда обратиться, если потерял студенческий?",
        "Обратитесь в деканат вашего факультета: прием с 10:00 до 16:00, кабинет 101."
    ),
    (
        "какие документы нужны для перевода в другой вуз?",
        "Для перевода нужны: заявление, академическая справка, копия паспорта, копия зачётной книжки."
    ),
    (
        "как оплатить общежитие?",
        "Оплата общежития производится через личный кабинет до 10-го числа каждого месяца."
    ),
    (
        "куда писать заявление на академический отпуск?",
        "Заявление на академический отпуск оформляется на имя проректора по учебной работе и подаётся через деканат." 
    ),
    (
        "как заказать справку об обучении?",
        "Справку об обучении можно заказать в отделе кадров. Заполните форму № 40 на сайте университета." 
    ),
    (
        "когда оплачивать семестр?",
        "Семестр необходимо оплатить до 25 августа (осенний) или до 25 января (весенний)." 
    ),
    (
        "как получить дубликат зачётной книжки?",
        "Для дубликата зачётной книжки подайте заявление в деканат и квитанцию об оплате (300 руб)." 
    ),
    (
        "какие контакты у приёмной комиссии?",
        "Приёмная комиссия: телефон +7 812 123-45-67, email: admission@university.ru (пн-пт 09:00-17:00)." 
    ),
]

# ───── helpers ------------------------------------------------------------

def load_pipe(model_dir: Path):
    return pipeline("question-answering", model=str(model_dir), tokenizer=str(model_dir), device=-1)


def show_answer(qa_pipe, q: str, ctx: str):
    out = qa_pipe(question=q, context=ctx)
    print(f"Q: {q}\nCTX: {ctx}\nA: {out['answer']}   (score={out['score']:.3f})\n")

# ───── main --------------------------------------------------------------
if __name__ == "__main__":
    ap = argparse.ArgumentParser("FAQ QA-demo (без NER)")
    ap.add_argument("--model",   type=Path, default=MODEL)
    ap.add_argument("--question", type=str, help="одиночный вопрос")
    ap.add_argument("--context",  type=str, help="контекст для одиночного вопроса")
    args = ap.parse_args()

    qa = load_pipe(args.model)

    # single mode
    if args.question:
        if not args.context:
            ap.error("--question требует --context")
        show_answer(qa, args.question, args.context)
        sys.exit(0)

    # demo mode
    print("— DEMO (FAQ) —\n")
    for q, ctx in SAMPLE_PAIRS:
        show_answer(qa, q, ctx)

    # interactive
    print("Введите свой вопрос (Enter пустой — выход):")
    while True:
        user_q = input("Q> ").strip()
        if not user_q:
            break
        user_ctx = input("CTX> ").strip()
        if not user_ctx:
            print("Контекст пуст — повторите.")
            continue
        show_answer(qa, user_q, user_ctx)
